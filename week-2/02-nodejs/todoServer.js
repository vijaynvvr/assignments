/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const fs = require('fs');
const app = express();
const { v4: uuidv4 } = require('uuid');


app.use(express.json());

app.get("/", (req, res) => {
  res.send("Working");
})

app.get("/todos", (req, res) => {
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) res.send(err);
    else res.status(200).json(JSON.parse(data));
  });
})

app.get("/todos/:id", (req, res) => {
  const id = req.params.id;
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) res.send(err);
    else {
      const todoData = JSON.parse(data);
      const dataFound = todoData.find(todo => todo.id === id);
      if (!dataFound) res.status(404).send("Not Found");
      else res.status(200).json(dataFound);
    }
  });
})

app.post("/todos", (req, res) => {
  const id = uuidv4();
  const completed = false;
  const {title, description} = req.body;
  const newTodo = {
    id, title, description, completed
  }
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) res.send(err);
    else {
      const todoData = JSON.parse(data);
      todoData.push(newTodo);
      fs.writeFile("./todos.json", JSON.stringify(todoData), (err) => {
        if (err) res.send(err);
        res.status(201).json({id});
      })
    }
  });
})

app.put("/todos/:id", (req, res) => {
  const id = req.params.id;
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    let todoData = JSON.parse(data);
    const dataFound = todoData.find(todo => todo.id === id);
    console.log(dataFound);
    if (!dataFound) res.status(404).send("Not Found");
    else {
      const {title, description} = req.body;
      const newTodo = {...dataFound, title, description};
      todoData = todoData.map(todo => todo.id == id ? newTodo: todo);
      fs.writeFile("./todos.json", JSON.stringify(todoData), (err) => {
        if (err) res.send(err);
        res.status(200).send("OK");
      })
    }
  })
})

app.delete("/todos/:id", (req, res) => {
  const id = req.params.id;
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) res.send(err);
    else {
      const todoData = JSON.parse(data);
      const dataFound = todoData.find(todo => todo.id === id);
      if (!dataFound) res.status(404).send("Not Found");
      else {
        const filteredData = todoData.filter(todo => todo !== dataFound);
        fs.writeFile("./todos.json", JSON.stringify(filteredData), (err) => {
          if (err) res.send(err);
          res.status(200).send("OK");
        })
      }
    }
  })
})


app.listen(8000, () => {
  console.log("Connected on PORT: 8000");
})

module.exports = app;